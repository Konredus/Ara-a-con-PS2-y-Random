//--------------------------------------------------------------
//       Autor del Programa: Konrad Peschka
//       Empresa: KaiwaTec
//       Fecha: Noviembre 2016
//--------------------------------------------------------------

#include <Servo.h>
#include <NewPing.h>
#include <PS2X_lib.h>

PS2X ps2x; // crea una variable con la Clase del Control PS2

#define TRIG_PIN 10
#define ECHO_PIN 11
#define MAX_DISTANCE 100
NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);

//-------------------------------------------------------------------
//  Definicion de las constantes posicion inicial de cada servo
//-------------------------------------------------------------------

//subir = giro antihor en cuerpo y patas

#define FIC_centro     1600// 1100     //Frente_Izquierda_cuerpo_centro
#define FDC_centro     1500//1700     //Frente_derecha_cuerpo_centro
#define AIC_centro     1400// 1800     //Atras_Izquierda_cuerpo_centro
#define ADC_centro     1600// 1250     //Atras_derecha_cuerpo_centro

#define FIP_centro      300      //Frente_Izquierda_pata_centro
#define FDP_centro      350      //Frente_derecha_pata_centro
#define AIP_centro      400      //Atras_Izquierda_pata_centro
#define ADP_centro      450      //Atras_derecha_pata_centro

//-------------------------------------------------------------------
//      Definicion Alias de cada servo y los Pines del Arduino
//-------------------------------------------------------------------

#define FIC_pin A0      // Pin Frente Izquierda Cuerpo
#define FDC_pin 5      // Pin Frente Derecha Cuerpo
#define AIC_pin A1      // Pin Atras Izquierda Cuerpo
#define ADC_pin 4      // Pin Atras Derecha Cuerpo

#define FIP_pin A2      // Pin Frente Izquierda Pata
#define FDP_pin 7     // Pin Frente Derecha Pata
#define AIP_pin A3      // Pin Atras Izquierda Pata
#define ADP_pin 6     // Pin Atras Derecha Pata

#define Cabeza_pin 3

#define pulsador 13  //defino donde va conectado el pulsador de arranque


//-------------------------------------------------------------------

int modo_funcionamiento = 0; // uno = modo automatico , cero=modo manual
int variable_altura = 300;

int movimiento_izq;
int movimiento_der;
int levanta = -500;

int contador_sentarse;
int distancia_actual = 0;

int aux = 0;  //auxiliar que utilizo para las funciones especiales
int variable_sienta = 1000;

int tiempo_entre_servo = 35;
const int tiempo_sienta = 50;
const int distancia_deteccion = 30;  //distancia a partir del cual la araña gira
const int distancia_critica = 15;    //distancia a partir del cual la araña retrocede

const int margen_joystick = 10;    //margen que tiene el joystick para saber si esta corrido del centro

int variable_control = 0; //variable que indica que comando fue pulsado en el PS2
long aux_tiempo_random = 0;
int tiempo_random = 0;
bool aux_random = 0; //sirve para mover las atas en forma random

const  int servo_us_izq = 120;
const  int servo_us_med = 90;
const  int servo_us_der = 60;
//-------------------------------------------------------------------
//       Defino como le va a llamar cada servo
//-------------------------------------------------------------------

Servo FIC_servo;                                               // Frente Izquierda Cuerpo
Servo FDC_servo;                                               // Frente Derecha Cuerpo
Servo AIC_servo;                                               // Atras Izquierda Cuerpo
Servo ADC_servo;                                               // Atras Derecha Cuerpo
Servo FIP_servo;                                               // Frente Izquierda Pata
Servo FDP_servo;                                               // Frente Derecha Pata
Servo AIP_servo;                                               // Atras Izquierda Pata
Servo ADP_servo;                                               // Atras Derecha Pata

Servo Cabeza_servo;

//-------------------------------------------------------------------
//                 Seteo de Entradas, salidas y funciones
//-------------------------------------------------------------------

void setup()
{
  millis();  //activo tiempo para el random

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(pulsador, INPUT);

  //-------------------------------------------------------------------
  //         DEFINO E INICIAIZO TODOS LOS SERVOS EN PUNTO MEDIO
  //-------------------------------------------------------------------

  FIC_servo.attach(FIC_pin);           //define los servos con su pin
  FIC_servo.writeMicroseconds(FIC_centro);       // envia servo a su posicion inicial
  delay(tiempo_entre_servo);

  FDC_servo.attach(FDC_pin);
  FDC_servo.writeMicroseconds(FDC_centro);
  delay(tiempo_entre_servo);

  AIC_servo.attach(AIC_pin);
  AIC_servo.writeMicroseconds(AIC_centro);
  delay(tiempo_entre_servo);

  ADC_servo.attach(ADC_pin);
  ADC_servo.writeMicroseconds(ADC_centro);
  delay(tiempo_entre_servo);

  FIP_servo.attach(FIP_pin);
  FIP_servo.writeMicroseconds(FIP_centro + variable_altura);
  delay(tiempo_entre_servo);

  FDP_servo.attach(FDP_pin);
  FDP_servo.writeMicroseconds(FDP_centro + variable_altura);
  delay(tiempo_entre_servo);

  AIP_servo.attach(AIP_pin);
  AIP_servo.writeMicroseconds(AIP_centro + variable_altura);
  delay(tiempo_entre_servo);

  ADP_servo.attach(ADP_pin);
  ADP_servo.writeMicroseconds(ADP_centro + variable_altura);
  delay(tiempo_entre_servo);

  Cabeza_servo.attach(Cabeza_pin);
  Cabeza_servo.write(servo_us_med);

  //------------------------------DEFINO PINES DEL CONTROL REMOTO------------------

  ps2x.config_gamepad(A4, 1, A5, 0, true, true); //clock, command, attention, data

  delay(500);
}

//-------------------------------------------------------------------
//         Sector donde comienza la funcion Principal,
//        Donde se va a quedar el resto de la ejecucion
//-------------------------------------------------------------------

void loop()
{

  lee_pulsador();
  while (modo_funcionamiento == 0) //modo manual, lee datos del PS2
  {
    lee_pulsador();
    modo_manual();
  }

  while (modo_funcionamiento == 1) //modo automatico
  {
    lee_pulsador();
    modo_automatico();
  }

}

//---------------------------------------------------------------------------
//-------------------------------------------------------------------------
//                   Sector definicion delas Funciones Utilizadas
//---------------------------------------------------------------------------
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
//           Funcion que lee pulsador
//-------------------------------------------------------------------------------------

void lee_pulsador(void)
{
  int aux_pulsador = 0; //inicializo siempre el auxiliar antes de entrar

  while (digitalRead(pulsador) == HIGH) //me quedo en el loop mientras esta pulsado
  {
    delay(50);     //tiempo antirebote
    aux_pulsador = 1;
  }

  if (aux_pulsador == 1) //si se pulso el pulsador entro en este if
  {
    if (modo_funcionamiento == 0) //si esta en cero, lo paso a uno
      modo_funcionamiento = 1;
    else                        //si esta en uno, lo paso a cero
      modo_funcionamiento = 0;
  }

}

//-------------------------------------------------------------------------------------
//                          revisa ultrasonido cercano
//-------------------------------------------------------------------------------------

void ultrasonido_cercano(void)
{
  if (distancia_actual <= distancia_deteccion && distancia_actual >= distancia_critica) //si hay algo entre 10 y 30cm miro para costados y giro
  {
    mira_costados();
  }
  else
  {
    if (distancia_actual < distancia_critica && distancia_actual != 0) //si el objeto esta muy cerca, camina para atras
    {
      camina_atras();
    }
  }
}

//-------------------------------------------------------------------------------------
//       modo automatico donde el robot se mueve esquivando obstaculos
//-------------------------------------------------------------------------------------

void modo_automatico(void)
{
  funcion_random_patas();
  distancia_actual = readPing();
  if ((distancia_actual == 0) || ( distancia_actual > distancia_deteccion)) //mido mayor a 30cm y con el cero evito errores
  {
    movimiento_izq = -300;
    movimiento_der = -300;
    Camina_frente();
  }

  else  //casi contrasio significa que hay algo menor a 30cm
  {
    ultrasonido_cercano();
  }
/*
  if (contador_sentarse == 10)
  {
    sienta();
    delay(4000);  //tiempo que se queda sentado
    posicion_reposo();
  }


  if (contador_sentarse == 20)
  {
    saluda();
    delay(2000);
    while (contador_sentarse < 30)
    {
      mueve_pata_frente();
      contador_sentarse++;
      delay(tiempo_entre_servo);
      contador_sentarse++;
    }
  }

  if (contador_sentarse > 40)
  {
    contador_sentarse = 0;
  }

  contador_sentarse++;
  */
}

//-------------------------------------------------------------------------------------
//           modo manual, donde se conecta al control PS2 y recibe comandos
//-------------------------------------------------------------------------------------


void modo_manual(void)
{
  lectura_control();  //lectura del control PS2

  funcion_random_patas();

  if (variable_control == 0) //si no llegan comandos de la PS2 hago nada
  {
    posicion_reposo();
  }

  //-------------comandos de habilidades especiales----------------------------

  //--------------------------se pulsa triangulo  ---------------------------------

  while (variable_control == 7) //fue pulsado triangulo
  {
    if (aux == 0)
      sienta();
    aux = 1;
    delay(10);
    lectura_control();

    while (variable_control == 7) //fue pulsado triangulo
    {
      delay(10);
      lectura_control();
    }
  }

  if (aux == 1)
  {
    posicion_reposo();
    aux = 0;
    delay(300);
  }

  //--------------------------se pulsa circulo  ---------------------------------

  while (variable_control == 8) //fue pulsado circulo
  {
    if (aux == 0)
      saluda();
    aux = 1;
    delay(10);
    lectura_control();

    while (variable_control == 8) //fue pulsado circulo
    {
      delay(10);
      mueve_pata_frente();
      lectura_control();
    }
  }
  if (aux == 1)
  {
    posicion_reposo();
    aux = 0;
    delay(300);
  }

  //--------------------------se pulsa X   ---------------------------------

  while (variable_control == 9) //fue pulsado X
  {
    if (aux == 0)
      alaba();
    aux = 1;
    delay(10);
    lectura_control();

    while (variable_control == 9) //fue pulsado x
    {
      delay(10);
      lectura_control();
    }
  }
  if (aux == 1)
  {
    posicion_reposo();
    aux = 0;
    delay(300);
  }

  //--------------------------se pulsa Cuadrado   ---------------------------------

  while (variable_control == 10) //fue pulsado cuadrado
  {
    if (aux == 0)
      angelito_cae();
    aux = 1;
    delay(10);
    lectura_control();

    while (variable_control == 10) //fue pulsado cuadrado
    {
      delay(10);
      angelito_saluda();
      lectura_control();
    }
  }
  if (aux == 1)
  {
    // angelito_levanta();
    aux = 0;
    delay(300);
  }

  //-------------------comandos de movimientos normales--------------------

  if (variable_control == 11) //fue pulsado arriba
  {
    distancia_actual = readPing();

    if ( (distancia_actual != 0) && (distancia_actual < distancia_critica))
    {
      camina_atras();
    }

    else
    {
      movimiento_izq = -300;
      movimiento_der = -300;
      Camina_frente();
    }
  }
  if (variable_control == 12) //fue pulsado abajo
  {
    camina_atras();
  }
  if (variable_control == 13) //fue pulsado izquierda
  {
    Gira_der() ;
  }
  if (variable_control == 14) //fue pulsado derecha
  {
    Gira_izq();
  }


  //----------------comando aumento y disminucion de velocidad--------------------------

  if (variable_control == 23) //se pulso  R1
  {
    tiempo_entre_servo = tiempo_entre_servo + 10;
    if (tiempo_entre_servo > 240)
      tiempo_entre_servo = 240;
  }

  if (variable_control == 24) //se pulso L1
  {
    tiempo_entre_servo = tiempo_entre_servo - 10;
    if (tiempo_entre_servo < 10)
      tiempo_entre_servo = 10;
  }

  //----------------mueve cabeza de la araña------------------

  if (variable_control == 6) //se pulso  R2
  {
    Cabeza_servo.write(servo_us_der);                 // mueve cabeza hacia la derecha
    delay(tiempo_entre_servo);
  }

  if (variable_control == 5) //se pulso L2
  {
    Cabeza_servo.write(servo_us_izq);                 // mueve cabeza hacia la izquierda
    delay(tiempo_entre_servo);
  }


}

//-------------------------------------------------------------------------------------
//       funcion para volver a la posicion inicial despues de cada movimiento
//-------------------------------------------------------------------------------------
void posicion_reposo(void)
{
  FIC_servo.writeMicroseconds(FIC_centro);       // envia servo a su posicion inicial
  delay(tiempo_entre_servo);
  FDC_servo.writeMicroseconds(FDC_centro);
  delay(tiempo_entre_servo);
  AIC_servo.writeMicroseconds(AIC_centro);
  delay(tiempo_entre_servo);
  ADC_servo.writeMicroseconds(ADC_centro);
  delay(tiempo_entre_servo);

  FIP_servo.writeMicroseconds(FIP_centro + variable_altura);
  delay(tiempo_entre_servo);
  FDP_servo.writeMicroseconds(FDP_centro + variable_altura);
  delay(tiempo_entre_servo);
  AIP_servo.writeMicroseconds(AIP_centro + variable_altura);
  delay(tiempo_entre_servo);
  ADP_servo.writeMicroseconds(ADP_centro + variable_altura);
  delay(tiempo_entre_servo);
  Cabeza_servo.write(servo_us_med);
}

//-------------------------------------------------------------------
//             Funcion Avanzar hacia el frente
//-------------------------------------------------------------------
void Camina_frente()
{

  FDP_servo.writeMicroseconds(FDP_centro - levanta + variable_altura);            // raise front right leg
  delay(tiempo_entre_servo);
  AIP_servo.writeMicroseconds(AIP_centro - levanta + variable_altura);            // raise rear  left  leg
  delay(tiempo_entre_servo);
  FIC_servo.writeMicroseconds(FIC_centro - movimiento_izq);       // move  front left  leg backward
  delay(tiempo_entre_servo);
  ADC_servo.writeMicroseconds(ADC_centro + movimiento_der);       // move  rear  right leg backward
  delay(tiempo_entre_servo / 2);
  FDC_servo.writeMicroseconds(FDC_centro - movimiento_der);       // move  front right leg forward
  delay(tiempo_entre_servo);
  AIC_servo.writeMicroseconds(AIC_centro + movimiento_izq);       // move  rear  left  leg forward
  delay(tiempo_entre_servo);
  FDP_servo.writeMicroseconds(FDP_centro + variable_altura);                      // lower front right leg
  delay(tiempo_entre_servo);
  AIP_servo.writeMicroseconds(AIP_centro + variable_altura);                      // lower rear  left  leg
  delay(tiempo_entre_servo);


  FIP_servo.writeMicroseconds(FIP_centro - levanta + variable_altura);            // raise front left  leg
  delay(tiempo_entre_servo);
  ADP_servo.writeMicroseconds(ADP_centro - levanta + variable_altura);            // raise rear  right leg
  delay(tiempo_entre_servo);
  FDC_servo.writeMicroseconds(FDC_centro + movimiento_der);       // move  front right leg backward
  delay(tiempo_entre_servo);
  AIC_servo.writeMicroseconds(AIC_centro - movimiento_izq);       // move  rear  left  leg backward
  delay(tiempo_entre_servo / 2);
  FIC_servo.writeMicroseconds(FIC_centro + movimiento_izq);       // move  front left  leg forward
  delay(tiempo_entre_servo);
  ADC_servo.writeMicroseconds(ADC_centro - movimiento_der);       // move  rear  right leg forward
  delay(tiempo_entre_servo);
  FIP_servo.writeMicroseconds(FIP_centro + variable_altura);                      // lower front left  leg
  delay(tiempo_entre_servo);
  ADP_servo.writeMicroseconds(ADP_centro + variable_altura);                      // lower rear  right leg
  delay(tiempo_entre_servo);

}

//-------------------------------------------------------------------
//            Funcion que lee el sensor frontal
//-------------------------------------------------------------------

int readPing()                            //funcion para leer US y pasarlo a cm
{
  unsigned int uS = sonar.ping();
  delay(50);
  int cm = uS / US_ROUNDTRIP_CM;
  return cm;
}


//-------------------------------------------------------------------
//  Mide para lso costados para despues decidir hacia donde avanzar
//-------------------------------------------------------------------

void mira_costados(void)                          //hace un barrido y decide para donde ir
{
  int distancia_der = 0;
  int distancia_izq = 0;

  //-----------      miro para la izquierda   ----------------------------

  Cabeza_servo.write(servo_us_izq);                 // servo se mueve a la posicion izquierda
  delay(tiempo_entre_servo);
  distancia_izq = readPing();                 //lee ultrasonido

  //-----------      miro para la derecha   ----------------------------

  Cabeza_servo.write(servo_us_der);                 // servo se mueve a la posicion derecha
  delay(tiempo_entre_servo);
  distancia_der = readPing();                 //lee ultrasonido

  //-----------      vuelvo a mirar al medio   ----------------------------

  Cabeza_servo.write(servo_us_med);                //posiciona servo en el medio
  delay(tiempo_entre_servo);

  if (distancia_der > distancia_izq)
  {
    Gira_der();                       //gira derecha
    Gira_der();                       //gira 2 veces para mayor giro
  }
  if (distancia_izq > distancia_der)
  {
    Gira_izq();                      //gira izquierda
    Gira_izq();                      //gira 2 veces para mayor giro
  }
}

//-------------------------------------------------------------------
//                 Gira Derecha
//-------------------------------------------------------------------


void Gira_der()
{
  movimiento_izq = 300;
  movimiento_der = -300;
  Camina_frente();
}

//-------------------------------------------------------------------
//                 Gira Izquierda
//-------------------------------------------------------------------

void Gira_izq()
{
  movimiento_izq = -300;
  movimiento_der = 300;
  Camina_frente();
}

//-------------------------------------------------------------------
//               Camina hacia atras
//-------------------------------------------------------------------

void camina_atras()
{
  movimiento_izq = 300;
  movimiento_der = 300;
  Camina_frente();
}

//-------------------------------------------------------------------
//                  Funcion Sentarse
//-------------------------------------------------------------------
void sienta(void)
{

  FDC_servo.writeMicroseconds(FDC_centro);
  delay(tiempo_entre_servo);
  FIC_servo.writeMicroseconds(FIC_centro);
  delay(tiempo_entre_servo);


  ADC_servo.writeMicroseconds(ADC_centro + variable_sienta / 3); //se tira de a poco
  delay(tiempo_entre_servo);
  AIC_servo.writeMicroseconds(AIC_centro - variable_sienta / 3);
  delay(tiempo_entre_servo);
  ADP_servo.writeMicroseconds(ADP_centro + variable_sienta / 3);
  delay(tiempo_entre_servo);
  AIP_servo.writeMicroseconds(AIP_centro + variable_sienta / 3);
  delay(tiempo_entre_servo);

  ADC_servo.writeMicroseconds(ADC_centro + variable_sienta / 2); //se tira de a poco
  delay(tiempo_entre_servo);
  AIC_servo.writeMicroseconds(AIC_centro - variable_sienta / 2);
  delay(tiempo_entre_servo);
  ADP_servo.writeMicroseconds(ADP_centro + variable_sienta / 2);
  delay(tiempo_entre_servo);
  AIP_servo.writeMicroseconds(AIP_centro + variable_sienta / 2);
  delay(tiempo_entre_servo);

  ADC_servo.writeMicroseconds(ADC_centro + variable_sienta); //se termina de tirar
  delay(tiempo_entre_servo);
  AIC_servo.writeMicroseconds(AIC_centro - variable_sienta);
  delay(tiempo_entre_servo);
  ADP_servo.writeMicroseconds(ADP_centro + variable_sienta);
  delay(tiempo_entre_servo);
  AIP_servo.writeMicroseconds(AIP_centro + variable_sienta);
  delay(tiempo_entre_servo);
}

void mueve_cabeza(void)
{
  Cabeza_servo.write(servo_us_der);
  delay(4 * tiempo_entre_servo);
  Cabeza_servo.write(servo_us_med);
  delay(4 * tiempo_entre_servo);
  Cabeza_servo.write(servo_us_izq);
  delay(4 * tiempo_entre_servo);
  Cabeza_servo.write(servo_us_med);
  delay(4 * tiempo_entre_servo);

}

void sentado_levanta(void)
{
  mueve_cabeza();

  FIC_servo.writeMicroseconds(FIC_centro);       // envia servo a su posicion inicial
  delay(tiempo_entre_servo);
  FDC_servo.writeMicroseconds(FDC_centro);
  delay(tiempo_entre_servo);
  AIC_servo.writeMicroseconds(AIC_centro);
  delay(tiempo_entre_servo);
  ADC_servo.writeMicroseconds(ADC_centro);
  delay(tiempo_entre_servo);

  FIP_servo.writeMicroseconds(FIP_centro + variable_altura);
  delay(tiempo_entre_servo);
  FDP_servo.writeMicroseconds(FDP_centro + variable_altura);
  delay(tiempo_entre_servo);
  AIP_servo.writeMicroseconds(AIP_centro + variable_altura);
  delay(tiempo_entre_servo);
  ADP_servo.writeMicroseconds(ADP_centro + variable_altura);
  delay(tiempo_entre_servo);
  Cabeza_servo.write(servo_us_med);
  delay(tiempo_entre_servo);
}


//-------------------------------------------------------------------
//                  Funcion Saluda
//-------------------------------------------------------------------

void saluda(void)
{
  FDC_servo.writeMicroseconds(FDC_centro);
  delay(tiempo_entre_servo / 2);
  FIC_servo.writeMicroseconds(FIC_centro);
  delay(tiempo_entre_servo / 2);

  ADC_servo.writeMicroseconds(ADC_centro + variable_sienta / 2); //se tira al piso de costado
  delay(tiempo_entre_servo / 2);
  AIC_servo.writeMicroseconds(AIC_centro - variable_sienta / 2);
  delay(tiempo_entre_servo / 2);

  FDP_servo.writeMicroseconds(2800);
  delay(tiempo_entre_servo / 2);
  AIP_servo.writeMicroseconds(AIP_centro + variable_sienta / 3);
  delay(tiempo_entre_servo / 2);
  AIP_servo.writeMicroseconds(AIP_centro + variable_sienta / 2);
  delay(tiempo_entre_servo / 2);
  AIP_servo.writeMicroseconds(AIP_centro + variable_sienta);
  delay(tiempo_entre_servo / 2);
  AIP_servo.writeMicroseconds(ADP_centro + variable_sienta);
  delay(tiempo_entre_servo / 2);
}

void saluda_levanta(void)
{
  mueve_cabeza();

  FIP_servo.writeMicroseconds(FIP_centro + variable_altura);
  delay(tiempo_entre_servo);
  FDP_servo.writeMicroseconds(FDP_centro + variable_altura);
  delay(tiempo_entre_servo);
  AIP_servo.writeMicroseconds(AIP_centro + variable_altura);
  delay(tiempo_entre_servo);
  ADP_servo.writeMicroseconds(ADP_centro + variable_altura);
  delay(tiempo_entre_servo);

  FIC_servo.writeMicroseconds(FIC_centro);       // envia servo a su posicion inicial
  delay(tiempo_entre_servo);
  FDC_servo.writeMicroseconds(FDC_centro);
  delay(tiempo_entre_servo);
  AIC_servo.writeMicroseconds(AIC_centro);
  delay(tiempo_entre_servo);
  ADC_servo.writeMicroseconds(ADC_centro);
  delay(tiempo_entre_servo);

  Cabeza_servo.write(servo_us_med);
  delay(tiempo_entre_servo);
}

//-------------------------------------------------------------------
//                  Funcion Mueve Pata en Frente
//-------------------------------------------------------------------

void mueve_pata_frente(void)
{
  int maximo = 500;
  for (int j = 0; j < maximo; j = j + 100)
  {
    FDC_servo.writeMicroseconds(FDC_centro + j); //se tira al piso de costado
    delay(tiempo_entre_servo);
  }

  for (int j = maximo; j > 0; j = j - 100)
  {
    FDC_servo.writeMicroseconds(FDC_centro + j); //se tira al piso de costado
    delay(tiempo_entre_servo);
  }

  for (int j = 0; j < maximo; j = j + 100)
  {
    FDC_servo.writeMicroseconds(FDC_centro - j); //se tira al piso de costado
    delay(tiempo_entre_servo);
  }

  for (int j = maximo; j > 0; j = j - 100)
  {
    FDC_servo.writeMicroseconds(FDC_centro - j); //se tira al piso de costado
    delay(tiempo_entre_servo);
  }
}


//-------------------------------------------------------------------
//                  Funcion Alaba y se queda abajo
//-------------------------------------------------------------------
void alaba(void)
{
  ADC_servo.writeMicroseconds(ADC_centro);
  delay(tiempo_entre_servo / 2);
  AIC_servo.writeMicroseconds(AIC_centro);
  delay(tiempo_entre_servo / 2);

  FDC_servo.writeMicroseconds(FDC_centro + (variable_sienta / 2)); //se termina de tirar
  delay(tiempo_entre_servo / 2);
  FIC_servo.writeMicroseconds(FIC_centro - (variable_sienta / 2));
  delay(tiempo_entre_servo / 2);
  FDP_servo.writeMicroseconds(FDP_centro + variable_sienta);
  delay(tiempo_entre_servo / 2);
  FIP_servo.writeMicroseconds(FIP_centro + variable_sienta);
  delay(tiempo_entre_servo / 2);
}


void alaba_levanta(void)
{
  FIC_servo.writeMicroseconds(FIC_centro);       // envia servo a su posicion inicial
  delay(tiempo_entre_servo);
  FDC_servo.writeMicroseconds(FDC_centro);
  delay(tiempo_entre_servo);
  AIC_servo.writeMicroseconds(AIC_centro);
  delay(tiempo_entre_servo);
  ADC_servo.writeMicroseconds(ADC_centro);
  delay(tiempo_entre_servo);

  FIP_servo.writeMicroseconds(FIP_centro + variable_altura);
  delay(tiempo_entre_servo);
  FDP_servo.writeMicroseconds(FDP_centro + variable_altura);
  delay(tiempo_entre_servo);
  AIP_servo.writeMicroseconds(AIP_centro + variable_altura);
  delay(tiempo_entre_servo);
  ADP_servo.writeMicroseconds(ADP_centro + variable_altura);
  delay(tiempo_entre_servo);

  Cabeza_servo.write(servo_us_med);
  delay(tiempo_entre_servo);
}

//-------------------------------------------------------------------
//                  Funcion angelito
//-------------------------------------------------------------------
void angelito_cae(void)
{
  FDC_servo.writeMicroseconds(FDC_centro + variable_sienta); //se termina de tirar
  delay(tiempo_entre_servo / 2);
  FIC_servo.writeMicroseconds(FIC_centro - variable_sienta);
  delay(tiempo_entre_servo / 2);
  FDP_servo.writeMicroseconds(FDP_centro + variable_sienta);
  delay(tiempo_entre_servo / 2);
  FIP_servo.writeMicroseconds(FIP_centro + variable_sienta);
  delay(tiempo_entre_servo / 2);

  ADC_servo.writeMicroseconds(ADC_centro - variable_sienta); //se termina de tirar
  delay(tiempo_entre_servo / 2);
  AIC_servo.writeMicroseconds(AIC_centro + variable_sienta);
  delay(tiempo_entre_servo / 2);
  ADP_servo.writeMicroseconds(ADP_centro + variable_sienta);
  delay(tiempo_entre_servo / 2);
  AIP_servo.writeMicroseconds(AIP_centro + variable_sienta);
  delay(tiempo_entre_servo / 2);
}

void angelito_saluda(void)
{
  int maximo = 600;
  for (int j = 0; j < maximo; j = j + 100)
  {
    FDC_servo.writeMicroseconds(FDC_centro + j); //se tira al piso de costado
    FIC_servo.writeMicroseconds(FIC_centro - j); //se tira al piso de costado
    ADC_servo.writeMicroseconds(ADC_centro - j); //se tira al piso de costado
    AIC_servo.writeMicroseconds(AIC_centro + j); //se tira al piso de costado
    delay(tiempo_entre_servo);
  }

  for (int j = maximo; j > 0; j = j - 100)
  {
    FDC_servo.writeMicroseconds(FDC_centro + j); //se tira al piso de costado
    FIC_servo.writeMicroseconds(FIC_centro - j); //se tira al piso de costado
    ADC_servo.writeMicroseconds(ADC_centro - j); //se tira al piso de costado
    AIC_servo.writeMicroseconds(AIC_centro + j); //se tira al piso de costado
    delay(tiempo_entre_servo);
  }

  for (int j = 0; j < maximo; j = j + 100)
  {
    FDC_servo.writeMicroseconds(FDC_centro - j); //se tira al piso de costado
    FIC_servo.writeMicroseconds(FIC_centro + j); //se tira al piso de costado
    ADC_servo.writeMicroseconds(ADC_centro + j); //se tira al piso de costado
    AIC_servo.writeMicroseconds(AIC_centro - j); //se tira al piso de costado
    delay(tiempo_entre_servo);
  }

  for (int j = maximo; j > 0; j = j - 100)
  {
    FDC_servo.writeMicroseconds(FDC_centro - j); //se tira al piso de costado
    FIC_servo.writeMicroseconds(FIC_centro + j); //se tira al piso de costado
    ADC_servo.writeMicroseconds(ADC_centro + j); //se tira al piso de costado
    AIC_servo.writeMicroseconds(AIC_centro - j); //se tira al piso de costado
    delay(tiempo_entre_servo);
  }
}

//---------------------------FUNCION RANDOM PATAS-----------------------
void funcion_random_patas(void)
{
  if (aux_random == 0)
  {
    tiempo_random = random(5000, 15000);
    aux_tiempo_random = millis();
    aux_random = 1;
  }
  if ((aux_random == 1) && (variable_control == 0))
  {
    if ((millis() - aux_tiempo_random) > tiempo_random)
    {
      aux_random = 0;
      switch (random(0, 5))
      {
        case 0:
          mueve_cabeza();
          break;
        case 1:
          mueve_pata_frente();
          break;
        case 2:
          Gira_der();
          break;
        case 3:
          Gira_izq();
          break;
        case 4:
          alaba();
          break;
        case 5:
          sienta();
          break;
      }
    }
  }
}
//-------------------------------------------------------------------------------------
void lectura_control(void)
{
  ps2x.read_gamepad(false, 0);          //read controller and set large motor to spin at 'vibrate' speed

  //-------------------------------------lectura de los Botones------------------------------------------------
  variable_control = 0;

  if (ps2x.ButtonPressed(PSB_START))
  {
    variable_control = 1;
    return;
  }

  if (ps2x.ButtonPressed(PSB_SELECT))
  {
    variable_control = 2;
    return;
  }


  if (ps2x.ButtonPressed(PSB_L1))
  {
    variable_control = 23;
    return;
  }


  if (ps2x.ButtonPressed(PSB_R1))
  {
    variable_control = 24;
    return;
  }

  if (ps2x.ButtonPressed(PSB_L2))
  {
    variable_control = 5;
    return;
  }


  if (ps2x.ButtonPressed(PSB_R2))
  {
    variable_control = 6;
    return;
  }

  if (ps2x.ButtonPressed(PSB_L3))
  {
    variable_control = 3;
    return;
  }


  if (ps2x.ButtonPressed(PSB_R3))
  {
    variable_control = 4;
    return;
  }


  if (ps2x.Button(PSB_GREEN)) //triangulo
  {
    variable_control = 7;
    return;
  }


  if (ps2x.Button(PSB_RED))  //circulo
  {
    variable_control = 8;
    return;
  }


  if (ps2x.Button(PSB_BLUE))  //x
  {
    variable_control = 9;
    return;
  }


  if (ps2x.Button(PSB_PINK))  //cuadrado
  {
    variable_control = 10;
    return;
  }


  if (ps2x.Button(PSB_PAD_UP))      //boton arriba
  {
    variable_control = 11;
    return;
  }


  if (ps2x.Button(PSB_PAD_DOWN))    //boton abajo
  {
    variable_control = 12;
    return;
  }


  if (ps2x.Button(PSB_PAD_LEFT))  //boton izquierda
  {
    variable_control = 13;
    return;
  }


  if (ps2x.Button(PSB_PAD_RIGHT))    //boton derecha
  {
    variable_control = 14;
    return;
  }
}


//-------------------------------------------------------------------
//               FIN PROGRAMA
//-------------------------------------------------------------------
